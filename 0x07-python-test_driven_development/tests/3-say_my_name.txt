=========================
How to use 3-say_my_name
=========================

This module defines a function that prints first and last name ``say_my_name(first_name, last_name="")``

Usage
=====

``say_my_Name(...)`` prints 'My name is <first_name> <last_name>

::

	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name('Kelven', 'Bango')
	My name is Kelven Bango

	>>> say_my_name(str(1971))
	My name is 1971 

When not specified the second argument <last_name> it uses default value.

::

	>>> say_my_name('Kelven')
	My name is Kelven 

Invalid arguments
=================

``first_name`` and ``last_name`` must be string otherwise raises TypeError

::

	>>> say_my_name(12, 'Bango')
	Traceback (most recent call last):
	TypeError: first_name must be a string

	>>> say_my_name(12)
	Traceback (most recent call last):
	TypeError: first_name must be a string

	>>> say_my_name('Kelven',12)
	Traceback (most recent call last):
	TypeError: last_name must be a string

	>>> say_my_name('Kelven',None)
	Traceback (most recent call last):
	TypeError: last_name must be a string

	>>> say_my_name(None)
	Traceback (most recent call last):
	TypeError: first_name must be a string

	>>> say_my_name(None, str(12))
	Traceback (most recent call last):
	TypeError: first_name must be a string

	>>> say_my_name(['Lario', 'Jose'], 'Bango')
	Traceback (most recent call last):
	TypeError: first_name must be a string

At least one name must be provided

::

	say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'
